2017-01-05



# 23 Tasks を保存していこう

tasks#create を作る。
Form から受け取れるのは :project_id なので、これを基に Task を登録する。

/app/controllers/tasks_controller.rb に def create を追加する。

  # CreateAction
  def create
    # 新規登録する Task に紐付く Project を取得する
    @project = Project.find(params[:project_id])
    # パラメータを基に Task を作る
    @task = @project.tasks.create(task_params)
    # Project の詳細画面を表示する
    redirect_to project_path(@project.id)
  end
  
  private
    # 受け取るパラメータを private で定義しておく
    def task_params
      params[:task].permit(:title)
    end

ついでに空欄での登録を許容しないよう Validate を追加しておく。
/app/models/task.rb に以下を追加。

  # Title の空欄登録を許容しない
  validates :title, presence: true



# 24 Tasks の削除をしてみよう

/app/views/projects/show.html.erb に削除リンクを追加する。

  <%# タスクの削除 %>
  <%= link_to "[Delete]", project_task_path(task.project_id, task.id), method: :delete,
    data: {
      confirm: "Are you sure?"
    }
  %>

次に /app/controllers/tasks_controller.rb に destroy を追加する。

  # DestroyAction
  def destroy
    @task = Task.find(params[:id])
    @task.destroy
    
    redirect_to project_path(params[:project_id])
  end



# 25 Check Box Tag を使おう

/app/views/projects/show.html.erb に完了チェックボックスを付ける。

  <%# 完了チェックボックス %>
  <%= check_box_tag '', '', task.done, {'data-id' => task.id, 'data-project_id' => task.project_id} %>

check_box_tag は単なるチェックボックスを生成する。第1・第2引数は今回不要なので空欄。チェック状況を判断する変数は task.done をそのまま渡す。
data 属性は jQuery での Ajax 操作のために用意しておく。

  <script>
    $(function() {
      // 完了チェックボックスの変更に合わせて Ajax 通信を行う
      $("input[type='checkbox']").on("click", function() {
        // 「xxx」部分をこれから作るヨ
        $.post("/projects/xxx/tasks/xxx/toggle");
      });
    });
  </script>